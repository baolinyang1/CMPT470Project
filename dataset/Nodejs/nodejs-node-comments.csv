Issue ID,Issue State,Issue Title,Comment ID,Author,Created At,Comment Body
57064,closed,tools: do not run major-release workflow on forks,2660771827,nodejs-github-bot,2025-02-15T06:32:43Z,"Review requested:

- [ ] @nodejs/actions"
57064,closed,tools: do not run major-release workflow on forks,2660772592,Trott,2025-02-15T06:35:11Z,Documentation for the pattern I'm using here: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#example-only-run-job-for-specific-repository
57064,closed,tools: do not run major-release workflow on forks,2660956311,github-actions[bot],2025-02-15T14:53:06Z,Fast-track has been requested by @jasnell. Please 👍 to approve.
57064,closed,tools: do not run major-release workflow on forks,2660961591,nodejs-github-bot,2025-02-15T15:01:26Z,Landed in 47ae886e43537365ccc54beff0b1ac08a5a5aa19
57028,closed,doc: recommend writing tests in new files and including comments,2656503095,nodejs-github-bot,2025-02-13T12:49:25Z,"Review requested:

- [ ] @nodejs/tsc"
57028,closed,doc: recommend writing tests in new files and including comments,2656504754,joyeecheung,2025-02-13T12:50:07Z,"cc @jasnell @nodejs/tsc since we discussed this in the TSC meeting before. In recent code reviews I noticed that many are still appending new test cases this way, which is probably guided by the doc, so I think we need to update the docs to have a ground to ask for changes when people do this in the PR.
"
57028,closed,doc: recommend writing tests in new files and including comments,2657959404,jakecastelli,2025-02-14T00:03:22Z,"I personally found naming a test (file name) is also hard, do we have any convention or guide for it?"
57028,closed,doc: recommend writing tests in new files and including comments,2658985169,joyeecheung,2025-02-14T10:58:08Z,I usually start with writing the comment and then take keywords from my comment to create the name. Not sure if that counts as guides.
57028,closed,doc: recommend writing tests in new files and including comments,2660915630,nodejs-github-bot,2025-02-15T12:58:10Z,Landed in ff51d83c963e3089477e14258cf58c2e826dca22
57013,closed,build: fix GN build failure,2653697820,nodejs-github-bot,2025-02-12T13:20:39Z,"Review requested:

- [ ] @nodejs/security-wg"
57013,closed,build: fix GN build failure,2660579415,nodejs-github-bot,2025-02-15T00:42:53Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65208/
57013,closed,build: fix GN build failure,2660645275,nodejs-github-bot,2025-02-15T02:37:13Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65209/
57013,closed,build: fix GN build failure,2660893415,nodejs-github-bot,2025-02-15T12:11:50Z,Landed in 44e2671b44503d3ab1520aa9e114de56d90983c6
54901,closed,Syntax error when using --experimental-transform-types and a decorator,2346217960,damianobarbati,2024-09-12T12:58:46Z,"@marco-ippolito is must be something trivial I'm missing, because nobody seems to have this problem and your tests are covering it in the last merge."
54901,closed,Syntax error when using --experimental-transform-types and a decorator,2346246395,marco-ippolito,2024-09-12T13:11:19Z,"Please refer to the documentation: https://nodejs.org/docs/latest/api/typescript.html#typescript-features

> Since Decorators are currently a [TC39 Stage 3 proposal](https://github.com/tc39/proposal-decorators) and will soon be supported by the JavaScript engine, they are not transformed and will result in a parser error. This is a temporary limitation and will be resolved in the future."
54901,closed,Syntax error when using --experimental-transform-types and a decorator,2346276349,damianobarbati,2024-09-12T13:24:18Z,@marco-ippolito do you have any news regarding v8 progress on decorators implementation? I can't find any info about it anywhere.
54901,closed,Syntax error when using --experimental-transform-types and a decorator,2660860322,B4nan,2025-02-15T10:28:09Z,"We are hitting the same, but when executing JS, not TS. It feels quite weird to me that node 22 works fine when executing ES decorators but node 23 breaks because ""they are stage 3 feature"". Things work fine with `--no-experimental-strip-types`. I will try to provide a minimal repro and open a new issue, since its about executing JS so probably not so much of a wontfix material like this one. The repro we have now is basically using https://github.com/mikro-orm/guide and running `npm i && npm run build && npm run start:prod`. This compiles the ESM app via `tsc` and runs it via `node`."
54901,closed,Syntax error when using --experimental-transform-types and a decorator,2660864715,marco-ippolito,2025-02-15T10:40:28Z,Please open another issue
54103,closed,src: replace deprecated `v8::FastApiTypedArray`,2256115455,targos,2024-07-29T14:35:08Z,"I'm not sure about the changes here, but I can update the other uses if they are correct."
54103,closed,src: replace deprecated `v8::FastApiTypedArray`,2256136367,targos,2024-07-29T14:44:07Z,Benchmark: https://ci.nodejs.org/view/Node.js%20benchmark/job/benchmark-node-micro-benchmarks/1585/
54103,closed,src: replace deprecated `v8::FastApiTypedArray`,2256260953,codecov[bot],2024-07-29T15:36:48Z,"## [Codecov](https://app.codecov.io/gh/nodejs/node/pull/54103?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) Report
Attention: Patch coverage is `0%` with `5 lines` in your changes missing coverage. Please review.
> Project coverage is 87.07%. Comparing base [(`01cf9bc`)](https://app.codecov.io/gh/nodejs/node/commit/01cf9bccdfa7fb31a8a1d91ae45e594a730e0427?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) to head [(`895a3fc`)](https://app.codecov.io/gh/nodejs/node/commit/895a3fcd1f0a2e58eae1fa08110ebc1a12269980?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs).
> Report is 1625 commits behind head on main.

| [Files with missing lines](https://app.codecov.io/gh/nodejs/node/pull/54103?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) | Patch % | Lines |
|---|---|---|
| [src/node\_buffer.cc](https://app.codecov.io/gh/nodejs/node/pull/54103?src=pr&el=tree&filepath=src%2Fnode_buffer.cc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs#diff-c3JjL25vZGVfYnVmZmVyLmNj) | 0.00% | [5 Missing :warning: ](https://app.codecov.io/gh/nodejs/node/pull/54103?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) |

<details><summary>Additional details and impacted files</summary>


```diff
@@            Coverage Diff             @@
##             main   #54103      +/-   ##
==========================================
- Coverage   87.07%   87.07%   -0.01%     
==========================================
  Files         643      643              
  Lines      181583   181587       +4     
  Branches    34886    34887       +1     
==========================================
- Hits       158114   158109       -5     
+ Misses      16751    16748       -3     
- Partials     6718     6730      +12     
```

| [Files with missing lines](https://app.codecov.io/gh/nodejs/node/pull/54103?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) | Coverage Δ | |
|---|---|---|
| [src/node\_external\_reference.h](https://app.codecov.io/gh/nodejs/node/pull/54103?src=pr&el=tree&filepath=src%2Fnode_external_reference.h&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs#diff-c3JjL25vZGVfZXh0ZXJuYWxfcmVmZXJlbmNlLmg=) | `100.00% <ø> (ø)` | |
| [src/node\_buffer.cc](https://app.codecov.io/gh/nodejs/node/pull/54103?src=pr&el=tree&filepath=src%2Fnode_buffer.cc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs#diff-c3JjL25vZGVfYnVmZmVyLmNj) | `74.01% <0.00%> (-0.21%)` | :arrow_down: |

... and [27 files with indirect coverage changes](https://app.codecov.io/gh/nodejs/node/pull/54103/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs)

</details>"
54103,closed,src: replace deprecated `v8::FastApiTypedArray`,2256419598,ronag,2024-07-29T16:47:06Z,Seems significantly slower. I would propose we stick with the deprecated api until there is a faster alternative or until it's been removed.
54103,closed,src: replace deprecated `v8::FastApiTypedArray`,2256420919,ronag,2024-07-29T16:47:39Z,I had similar results with the copy pr 
57021,closed,"test,crypto: make tests work for BoringSSL",2656143373,codecov[bot],2025-02-13T10:23:26Z,"## [Codecov](https://app.codecov.io/gh/nodejs/node/pull/57021?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) Report
All modified and coverable lines are covered by tests :white_check_mark:
> Project coverage is 89.10%. Comparing base [(`b7ca23f`)](https://app.codecov.io/gh/nodejs/node/commit/b7ca23f50ee732377e4631014e933b0b8ef69a27?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) to head [(`a49acf9`)](https://app.codecov.io/gh/nodejs/node/commit/a49acf9b60422c1ba95e359b7441f06b3cf0b321?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs).
> Report is 16 commits behind head on main.

<details><summary>Additional details and impacted files</summary>


```diff
@@            Coverage Diff             @@
##             main   #57021      +/-   ##
==========================================
- Coverage   89.12%   89.10%   -0.02%     
==========================================
  Files         665      665              
  Lines      193191   193193       +2     
  Branches    37213    37212       -1     
==========================================
- Hits       172175   172142      -33     
- Misses      13757    13777      +20     
- Partials     7259     7274      +15     
```

[see 42 files with indirect coverage changes](https://app.codecov.io/gh/nodejs/node/pull/57021/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs)

</details>"
57021,closed,"test,crypto: make tests work for BoringSSL",2656640370,nodejs-github-bot,2025-02-13T13:42:46Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65178/
57021,closed,"test,crypto: make tests work for BoringSSL",2657404117,nodejs-github-bot,2025-02-13T18:22:22Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65190/
57021,closed,"test,crypto: make tests work for BoringSSL",2660830366,nodejs-github-bot,2025-02-15T09:08:04Z,Landed in 59cdd4f1c246cceb89a00c37e3c819a08444c888
57060,closed,VIP,2660613148,khai2006108,2025-02-15T01:32:02Z,K
51404,closed,OS/architecture compatiblility list for nodejs versions,1881425996,kvakil,2024-01-08T16:33:01Z,"It's not a JSON file, but https://github.com/nodejs/node/blob/main/BUILDING.md#supported-platforms has the information available in markdown."
51404,closed,OS/architecture compatiblility list for nodejs versions,1881888093,mhdawson,2024-01-08T21:59:36Z,I was going to point to the link about as well in the BUILDING.md.  
51404,closed,OS/architecture compatiblility list for nodejs versions,1881891968,mhdawson,2024-01-08T22:02:38Z,"@thomaslagies did you download from the Node.js org website? 

This does have me thinking that having info on the Website that includes support info, closer to the links for the download binaries could make sense. @ovflowd an FYI as something we might want to incorporate."
51404,closed,OS/architecture compatiblility list for nodejs versions,1882526616,thomaslagies,2024-01-09T07:17:20Z,"> It's not a JSON file, but https://github.com/nodejs/node/blob/main/BUILDING.md#supported-platforms has the information available in markdown.

Ah, this is a good start! did not manage to find this list on my own"
51404,closed,OS/architecture compatiblility list for nodejs versions,1882530562,thomaslagies,2024-01-09T07:21:22Z,"> @thomaslagies did you download from the Node.js org website?
> 
> This does have me thinking that having info on the Website that includes support info, closer to the links for the download binaries could make sense. @ovflowd an FYI as something we might want to incorporate.

Yes. 
I am currently trying to figure out, on which systems our software and its 3rd party apps is able to run.
It's quite a complex matrix that in the end should help us to easily figure out which os/arch combination needs to be canceled, since it is no longer supported (e.g MongoDB 6 + Node.js 18 + X + Y -> can't run on RHEL 7 x86_64, but RHEL 8 x86_64). Thats why I asked for some kind of `json` or similar, that is easy parsable by for example github actions. "
51404,closed,OS/architecture compatiblility list for nodejs versions,1882913842,ovflowd,2024-01-09T11:39:34Z,"The best we can do is a breakdown of which binaries served directly by us are compatible to which OSs, but only from the currently maintained versions.

We sadly cannot provide a full graph of OSs, at best architectures. Any Linux binary targeted for x64 would work on any Linux OS with x64 arch. Or arm64 with x64 emulation.

Now, regarding package managers, such as yum, dnf, apt, we dont have control over these nor we're able to know which versions they provide and for which architectures."
51404,closed,OS/architecture compatiblility list for nodejs versions,1883956709,mhdawson,2024-01-09T23:28:39Z,"> The best we can do is a breakdown of which binaries server directly by us are compatible to which OSs, but only from the currently maintained versions.

I agree that is all we can and should do."
51404,closed,OS/architecture compatiblility list for nodejs versions,1884561151,thomaslagies,2024-01-10T10:17:14Z,That would be great!
51404,closed,OS/architecture compatiblility list for nodejs versions,1885736999,mhdawson,2024-01-10T21:09:17Z,@ovflowd should we move this issue to the WebSite repo?
51404,closed,OS/architecture compatiblility list for nodejs versions,2216036115,github-actions[bot],2024-07-09T01:27:34Z,"There has been no activity on this feature request for 5 months. To help maintain relevant open issues, please add the https://github.com/nodejs/node/labels/never-stale label or close this issue if it should be closed. If not, the issue will be automatically closed 6 months after the last non-automated comment.
For more information on how the project manages feature requests, please consult the [feature request management document](https://github.com/nodejs/node/blob/HEAD/doc/contributing/feature-request-management.md)."
51404,closed,OS/architecture compatiblility list for nodejs versions,2238874049,ovflowd,2024-07-19T10:38:06Z,"> @ovflowd should we move this issue to the WebSite repo?

Sorry, I've completely missed this! I honestly believe the Build team should handle such metadata, as they own such knowledge/metadata or even the releases.

I'm more than happy to take ownership of this, but I, unfortunately, would need to rely on the build team to gather such info. What should we do here? cc @nodejs/build "
51404,closed,OS/architecture compatiblility list for nodejs versions,2594276596,github-actions[bot],2025-01-16T01:28:22Z,"There has been no activity on this feature request for 5 months. To help maintain relevant open issues, please add the https://github.com/nodejs/node/labels/never-stale label or close this issue if it should be closed. If not, the issue will be automatically closed 6 months after the last non-automated comment.
For more information on how the project manages feature requests, please consult the [feature request management document](https://github.com/nodejs/node/blob/HEAD/doc/contributing/feature-request-management.md)."
51404,closed,OS/architecture compatiblility list for nodejs versions,2660611365,github-actions[bot],2025-02-15T01:28:28Z,"There has been no activity on this feature request and it is being closed. If you feel closing this issue is not the right thing to do, please leave a comment.

For more information on how the project manages feature requests, please consult the [feature request management document](https://github.com/nodejs/node/blob/HEAD/doc/contributing/feature-request-management.md)."
57043,closed,URLPattern crashing REPL with `std::out_of_range`,2659715502,targos,2025-02-14T16:04:02Z,It's not specific to the REPL.
57043,closed,URLPattern crashing REPL with `std::out_of_range`,2659715928,targos,2025-02-14T16:04:13Z,@nodejs/url
57043,closed,URLPattern crashing REPL with `std::out_of_range`,2659989506,anonrig,2025-02-14T18:20:15Z,"> It's not specific to the REPL.

Is there a repro without REPL?"
57043,closed,URLPattern crashing REPL with `std::out_of_range`,2660022595,targos,2025-02-14T18:38:33Z,Same lines in a file 
57043,closed,URLPattern crashing REPL with `std::out_of_range`,2660209519,anonrig,2025-02-14T20:30:39Z,"This will be fixed with: https://github.com/ada-url/ada/pull/878. Thank you for the bug report! Apparently, WPT does not have enough test coverage for this edge case."
57052,closed,process: improve error message for process.cwd() when directory is deleted,2660344815,nodejs-github-bot,2025-02-14T21:55:53Z,"Review requested:

- [ ] @nodejs/startup"
57052,closed,process: improve error message for process.cwd() when directory is deleted,2660368510,Ankush1oo8,2025-02-14T22:15:17Z,should i change the branch and resend the pr
56833,closed,crypto: support --use-system-ca on Windows,2625127272,nodejs-github-bot,2025-01-30T17:28:26Z,"Review requested:

- [ ] @nodejs/crypto"
56833,closed,crypto: support --use-system-ca on Windows,2625372354,nodejs-github-bot,2025-01-30T19:19:36Z,CI: https://ci.nodejs.org/job/node-test-pull-request/64854/
56833,closed,crypto: support --use-system-ca on Windows,2625388694,nodejs-github-bot,2025-01-30T19:27:40Z,CI: https://ci.nodejs.org/job/node-test-pull-request/64855/
56833,closed,crypto: support --use-system-ca on Windows,2625577126,codecov[bot],2025-01-30T20:56:27Z,"## [Codecov](https://app.codecov.io/gh/nodejs/node/pull/56833?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) Report
All modified and coverable lines are covered by tests :white_check_mark:
> Project coverage is 89.15%. Comparing base [(`4355b3f`)](https://app.codecov.io/gh/nodejs/node/commit/4355b3f16294aaf456ed6b9f2fc05bb0d407d788?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) to head [(`91db2b0`)](https://app.codecov.io/gh/nodejs/node/commit/91db2b025b2b4cdc594a0bb1f704734f8f5316fa?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs).
> Report is 11 commits behind head on main.

<details><summary>Additional details and impacted files</summary>


```diff
@@           Coverage Diff           @@
##             main   #56833   +/-   ##
=======================================
  Coverage   89.14%   89.15%           
=======================================
  Files         665      665           
  Lines      192846   192846           
  Branches    37147    37144    -3     
=======================================
+ Hits       171916   171926   +10     
- Misses      13696    13703    +7     
+ Partials     7234     7217   -17     
```

| [Files with missing lines](https://app.codecov.io/gh/nodejs/node/pull/56833?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) | Coverage Δ | |
|---|---|---|
| [src/crypto/crypto\_context.cc](https://app.codecov.io/gh/nodejs/node/pull/56833?src=pr&el=tree&filepath=src%2Fcrypto%2Fcrypto_context.cc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs#diff-c3JjL2NyeXB0by9jcnlwdG9fY29udGV4dC5jYw==) | `67.49% <ø> (ø)` | |

... and [27 files with indirect coverage changes](https://app.codecov.io/gh/nodejs/node/pull/56833/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs)

</details>"
56833,closed,crypto: support --use-system-ca on Windows,2625775970,timja,2025-01-30T22:49:07Z,"Nice work!

What sort of testing have you done on this? - I see the integration test added

I'll look to get someone on windows behind our ZScaler enterprise setup next week to test it.

(and potentially with https://github.com/timja/openjdk-intermediate-ca-reproducer both root -> leaf and root -> intermediate -> leaf, unless you've tested something similar) "
56833,closed,crypto: support --use-system-ca on Windows,2626070534,joyeecheung,2025-01-31T01:14:07Z,"> What sort of testing have you done on this? - I see the integration test added

So far only the test I modified in test-native-certs.mjs - basically the same as the macOS test, just running it first to see that it fails, then adding that certificate locally to Windows, run the test and see that it works, and removing that certificate. From what I can tell the real-world use cases I have only require the root CA certificates from either local machine or the current users to be trusted. I will try verifying it a bit on my end."
56833,closed,crypto: support --use-system-ca on Windows,2627353964,joyeecheung,2025-01-31T13:34:15Z,"I verified that this works for the environment that I have, which only require the root certificates to be added. I've left the intermediate CAs as a TODO since it seems many other tools do not support it either and is only needed for certain setups.

Fixed the linter complaints. @jasnell can you take a look again? Thanks"
56833,closed,crypto: support --use-system-ca on Windows,2627600582,timja,2025-01-31T15:20:29Z,"> I verified that this works for the environment that I have, which only require the root certificates to be added. I've left the intermediate CAs as a TODO since it seems many other tools do not support it either and is only needed for certain setups.

Chrome supports it somehow, not quite sure how it does it though, without the intermediate enterprise setups may not work properly as a lot of enterprises are using tools like ZScaler, (or other similar products) where you give the SaaS service an intermediate certificate that is trusted on your devices and then it resigns every certificate for each TLS endpoint you hit.

What tools specifically do you mean aren't supporting it? I expect the JDK is broken, Rust ecosystem generally I find works in this area.
"
56833,closed,crypto: support --use-system-ca on Windows,2627659029,joyeecheung,2025-01-31T15:46:32Z,"> without the intermediate enterprise setups may not work properly as a lot of enterprises are using tools like ZScaler, (or other similar products) where you give the SaaS service an intermediate certificate that is trusted on your devices and then it resigns every certificate for each TLS endpoint you hit.

Yes, I am aware, though this PR only aims to solve the other common case, where you are dealing with services from a organization/company/government that manages the certificates themselves instead of relying on a third-party SaaS. Hence the intermediate certificate use case is left as a TODO. I think that can be done in a follow-up PR instead, similar to the distrust store.

> What tools specifically do you mean aren't supporting it?

From what I can tell, every Rust tool using the rustls-native-certs crate (which seems rather popular) would not work with intermediate certificates, because they only query the root certificates from the current user https://github.com/rustls/rustls-native-certs/blob/main/src/windows.rs (if this approach somehow works for the intermediate certificates, then this PR should also just work because this PR does even more than that, though I doubt it does)."
56833,closed,crypto: support --use-system-ca on Windows,2640724852,nodejs-github-bot,2025-02-06T18:48:57Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65039/
56833,closed,crypto: support --use-system-ca on Windows,2642699215,nodejs-github-bot,2025-02-07T11:41:44Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65048/
56833,closed,crypto: support --use-system-ca on Windows,2643389993,joyeecheung,2025-02-07T16:20:58Z,Rebased after the leak fix landed. @jasnell can you take a look again? Thanks
56833,closed,crypto: support --use-system-ca on Windows,2643418302,nodejs-github-bot,2025-02-07T16:32:29Z,Landed in c0953d9de72576bb9b748e575db19d093601e90a
57049,closed,extract loop into runBench function,2660144089,nodejs-github-bot,2025-02-14T19:50:26Z,"Review requested:

- [ ] @nodejs/performance"
56896,closed,Stremio streaming server has thrown an error  QProcess::ProcessError code: 1,2635130237,itzikvil,2025-02-04T21:36:50Z,"Hi,

Is someone here?"
56896,closed,Stremio streaming server has thrown an error  QProcess::ProcessError code: 1,2660130831,juanarbol,2025-02-14T19:42:46Z,"Hi, thanks for the report; this is a third party app using Node.js, there is nothing we can do. This is not related to Node.js core itself but a misuse in an external project.

I'm going to close this issue, feel free to re-open if needed or you have a [minimal repro case](https://en.wikipedia.org/wiki/Minimal_reproducible_example#:~:text=The%20important%20feature%20of%20a,which%20will%20make%20resolution%20harder.) of this bug."
57048,closed,",,",2660094912,cjihrig,2025-02-14T19:20:31Z,This seems like spam generated by a tool or AI.
57008,closed,test: remove unnecessary assert requiring from tests,2652365033,nodejs-github-bot,2025-02-12T00:32:31Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65144/
57008,closed,test: remove unnecessary assert requiring from tests,2652455284,codecov[bot],2025-02-12T01:44:19Z,"## [Codecov](https://app.codecov.io/gh/nodejs/node/pull/57008?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) Report
All modified and coverable lines are covered by tests :white_check_mark:
> Project coverage is 89.10%. Comparing base [(`43ffcf1`)](https://app.codecov.io/gh/nodejs/node/commit/43ffcf1d2e50407cc19b587f6030c7d34b0932ec?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) to head [(`c23abd5`)](https://app.codecov.io/gh/nodejs/node/commit/c23abd5a54fcaea82d3533f6ee9e342dc9cfabf2?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs).
> Report is 16 commits behind head on main.

<details><summary>Additional details and impacted files</summary>


```diff
@@           Coverage Diff           @@
##             main   #57008   +/-   ##
=======================================
  Coverage   89.09%   89.10%           
=======================================
  Files         665      665           
  Lines      193191   193191           
  Branches    37211    37207    -4     
=======================================
+ Hits       172130   172135    +5     
- Misses      13762    13776   +14     
+ Partials     7299     7280   -19     
```

[see 26 files with indirect coverage changes](https://app.codecov.io/gh/nodejs/node/pull/57008/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs)

</details>"
57008,closed,test: remove unnecessary assert requiring from tests,2652497022,nodejs-github-bot,2025-02-12T02:22:13Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65146/
57008,closed,test: remove unnecessary assert requiring from tests,2653495837,aduh95,2025-02-12T11:54:22Z,Why though?
57008,closed,test: remove unnecessary assert requiring from tests,2653857532,dario-piotrowicz,2025-02-12T14:23:33Z,"> Why though?

it just simplifies the code (even though it's very minimal)? 🙂 "
57008,closed,test: remove unnecessary assert requiring from tests,2659875328,nodejs-github-bot,2025-02-14T17:19:22Z,Landed in cc7018ec51c5a44670605acfa092230adfc71a9e
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2250625499,Ethan-Arrowood,2024-07-25T15:09:00Z,Taking a look 👀 
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2250667683,Ethan-Arrowood,2024-07-25T15:23:36Z,"My understanding is that the `readableWebStream` method returns a ReadableStream in `bytes` mode (https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream#type) by default because files can contain any kind of data. As the error suggests, `ArrayBuffer` is not directly compatible with Node.js streams.

The best solution I could recommend right now is to maybe use a `TransformStream` and convert each `chunk` of the `ReadableStream` into a Node.js Buffer using `Buffer.from(chunk)` (which should correctly handle `ArrayBuffer`). 

Also, I assume the code you provided is just for reproduction purposes, but it's pretty inefficient to go from Node Stream to Web Stream back to Node stream. Keep it all as a Node stream, or convert it to Web stream and keep it as that. "
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2250682031,Ethan-Arrowood,2024-07-25T15:28:00Z,"Roughly:
```
const t = new TransformStream({
	transform(chunk, controller) {
		controller.enqueue(Buffer.from(chunk))
	},
})

const nodeStream = Readable.fromWeb(webStream.pipeThrough(t));
```

🤷‍♂️ "
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2250687911,Ethan-Arrowood,2024-07-25T15:29:43Z,"Regarding an actual fix to Node.js, I'd say we have to improve `Readable.fromWeb` to infer this and maybe do this transform automatically. I don't immediately see an issue with that. WDYT @jasnell ? "
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2250763489,karlhorky,2024-07-25T15:51:52Z,"> My understanding is that the `readableWebStream` method returns a ReadableStream in `bytes` mode ([developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream#type](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream#type)) by default because files can contain any kind of data.

> I'd say we have to improve `Readable.fromWeb` to infer this and maybe do this transform automatically

Oh ok, interesting - or should there a better default for `file.readableWebStream()`?

> Also, I assume the code you provided is just for reproduction purposes, but it's pretty inefficient to go from Node Stream to Web Stream back to Node stream. Keep it all as a Node stream, or convert it to Web stream and keep it as that.

Right, I can see how converting back and forth multiple times with this code would seem unrealistic or add overhead.

But this may not be so unrealistic if working with a Node.js framework that expects Web streams in user code - eg. [Route Handlers in Next.js](https://nextjs.org/docs/app/building-your-application/routing/route-handlers):

[`eric-burel/demo-readableWebStream`](https://github.com/eric-burel/demo-readableWebStream/blob/main/app/api/serve-picture/route.ts) in @eric-burel's demo repo

```ts
import fs from ""fs/promises""
import path from ""path""

export const dynamic = 'force-dynamic'

export async function GET(request: Request) {
    const filePath = path.resolve(""./public/image.jpg"")
    const stats = await fs.stat(filePath);
    const fileHandle = await fs.open(filePath)
    const stream = fileHandle.readableWebStream()
    return new Response(stream, {
        status: 200,
        headers: new Headers({
            ""content-disposition"": `attachment; filename=${path.basename(filePath)}`,
            ""content-type"": ""image/jpeg"",
            ""content-length"": stats.size + """",
        })
    })
```

...where in the background, there may be code like this to convert it to a Node.js stream:

- https://github.com/vercel/edge-runtime/blob/ff6580581017970106097188fbd4c0197477428c/packages/node-utils/src/edge-to-node/handler.ts#L13-L57
- https://github.com/vercel/edge-runtime/blob/ff6580581017970106097188fbd4c0197477428c/packages/node-utils/src/edge-to-node/stream.ts#L14-L76

> Keep it all as a Node stream, or convert it to Web stream and keep it as that

If there was a mode / way of working to instead keep everything as a Web stream, and also serve up Web streams from a Node.js response with `node:http` or similar, then that would I guess be an option for frameworks to migrate to... 🤔"
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2251262128,Ethan-Arrowood,2024-07-25T19:36:10Z,"> Oh ok, interesting - or should there a better default for file.readableWebStream()?

Maybe, I'm trying to think through where to best ""fix"" this. Because both side's limitation make sense to me. 

On one hand, you don't really want `file.readableWebStream()` to muck the underlying data. On the other, `Readable.fromWeb` should definitely handle this case. So the question comes down to _how_?"
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2253030794,jasnell,2024-07-26T15:44:41Z,"FWIW, The `readableWebStream()` does not return a `bytes` stream by default... If you call `const readable = fileHandle.readableWebStream({ type: 'bytes' })` then you'll get a proper byte-oriented stream that appears to work correctly with `new Response(readable)` ... I think maybe the change to make here is that `readableWebStream()` *should* return a byte-oriented stream by default."
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2253364668,Ethan-Arrowood,2024-07-26T19:45:44Z,"Ah I misunderstood the code here https://github.com/nodejs/node/blob/2d1b4a8cf7ce875f0c458941bb40ba6fbdccd42f/lib/internal/fs/promises.js#L284-L335

Do you foresee any issue with that change in default? "
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2253439794,jasnell,2024-07-26T20:12:17Z,I wouldn't imagine any issues but it would need to be a semvver-major change that should be called out in notable changes.
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2253444741,jasnell,2024-07-26T20:14:56Z,@karlhorky ... can you verify quickly if `const stream = fileHandle.readableWebStream({ type: 'bytes' });` works for your case?
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2253453025,karlhorky,2024-07-26T20:19:59Z,"Should be pretty easy to change the CodeSandbox linked above yep.

Although probably I'll need to check that out tomorrow"
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2253520113,Ethan-Arrowood,2024-07-26T21:17:50Z,"The method is still labeled as experimental in the docs, so would it really be a major change? I think a fix is appropriate "
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2254115625,karlhorky,2024-07-27T11:06:09Z,"> @karlhorky ... can you verify quickly if `const stream = fileHandle.readableWebStream({ type: 'bytes' });` works for your case?

Seems to work, yes! 👍

CodeSandbox: https://codesandbox.io/p/devbox/filehandle-readablewebstream-with-new-response-forked-mszlgw?file=%2Findex.js

Changes to original sandbox from PR description:

1. I forked the sandbox just now
2. I added `{ type: 'bytes' }` as an argument to `fileHandle.readableWebStream()`
3. I removed the ``""Content-Disposition"": `attachment; filename=${path.basename(filePath)}`,`` (which also worked to download the file by visiting the page directly, but didn't allow for a very nice demo)
4. I added `fileHandle.close()`, to avoid these warnings:
   ```
   (node:6079) Warning: Closing file descriptor 23 on garbage collection
   (Use `node --trace-warnings ...` to show where the warning was created)
   (node:6079) [DEP0137] DeprecationWarning: Closing a FileHandle object on garbage collection is deprecated. Please close FileHandle objects explicitly using FileHandle.prototype.close(). In the future, an error will be thrown if a file descriptor is closed during garbage collection.
   ```

![Screenshot 2024-07-27 at 13 05 19](https://github.com/user-attachments/assets/f9f6cb8c-5f56-4142-9887-8f7bec29619d)


cc @eric-burel"
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2260420439,eric-burel,2024-07-31T12:35:11Z,"@karlhorky absolutely wonderful, I'll update my resources on the topic to match this API.
Last tiny issue, I hit some TypeScript issues in the context of Next.js:
```
Argument of type 'ReadableStream<any>' is not assignable to parameter of type 'BodyInit | null | undefined'.
  Type 'import(""stream/web"").ReadableStream<any>' is not assignable to type 'ReadableStream<any>'.
    Types of property 'pipeThrough' are incompatible.
```
When passing the stream to `Response`. But maybe an issue on Next.js side.

Note that you can't close a file after the Response is sent in Next.js, so no way to properly close the file (closing it before the stream is sent will trigger an error as expected)."
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2270165977,Ethan-Arrowood,2024-08-06T00:56:19Z,@eric-burel that is an issue on the Next.js side. I believe it is a mismatch between Node.js Web Stream types and the Web Stream types from TypeScript's standard library (`lib`). 
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2419368584,isker,2024-10-17T12:11:12Z,"@jasnell 

> I think maybe the change to make here is that readableWebStream() should return a byte-oriented stream by default.

I'm looking into this problem and I'm not sure why the stream should ever be allowed to not be byte-oriented. It's not clear to me why this should be an option in the API at all.

For example, as far as I know, the Node stream APIs in `fs` only deal in bytes (unless you use `encoding` to get strings; but this is done with something like `TextDecoderStream` in web streams)."
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2461683805,karlhorky,2024-11-07T09:05:57Z,"@jasnell @Ethan-Arrowood PR has been opened by @isker over here:

- https://github.com/nodejs/node/pull/55461"
54041,closed,filehandle.readableWebStream() chunks return incompatible `ArrayBuffer` instead of `Uint8Array`,2659829406,karlhorky,2025-02-14T16:56:29Z,"Now that PR https://github.com/nodejs/node/pull/55461 [has been released in Node.js v23.8.0](https://github.com/nodejs/node/pull/57005):

I can confirm that Node.js v23.8.0 `FileHandle.readableWebStream()` can be used without configuration to easily create Web Streams 🎉

```ts
import fs from ""node:fs/promises"";
import http from ""node:http"";
import path from ""node:path"";
import { Readable } from ""node:stream"";

const filePath = ""./image.jpg"";

const server = http.createServer(async (nodeRequest, nodeResponse) => {
  const stats = await fs.stat(filePath);
  const fileHandle = await fs.open(filePath);
  const webStream = fileHandle.readableWebStream();

  nodeResponse.writeHead(200, {
    ""Content-Type"": ""image/jpeg"",
    ""Content-Length"": String(stats.size),
  });

  const nodeStream = Readable.fromWeb(webStream);

  nodeStream.pipe(nodeResponse).on(""finish"", async () => {
    await fileHandle.close();
  });
});

const port = 3000;
server.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});
```

CodeSandbox demo: https://codesandbox.io/p/devbox/filehandle-readablewebstream-with-new-response-forked-rly47y?file=%2Findex.js%3A9%2C35&workspaceId=ws_GfAuHrswXyA1DoeSwsjjjz

![Image](https://github.com/user-attachments/assets/18906347-fe21-4176-ad08-73a29d951d91)"
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2424373558,codecov[bot],2024-10-20T01:14:53Z,"## [Codecov](https://app.codecov.io/gh/nodejs/node/pull/55461?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) Report
All modified and coverable lines are covered by tests :white_check_mark:
> Project coverage is 88.41%. Comparing base [(`5e5af29`)](https://app.codecov.io/gh/nodejs/node/commit/5e5af2947f3ddbdde208a19e8a0d16ebdd123d2c?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) to head [(`41c448c`)](https://app.codecov.io/gh/nodejs/node/commit/41c448c778734c4d6c04521b5eab7609d3f2125d?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs).
> Report is 800 commits behind head on main.

<details><summary>Additional details and impacted files</summary>


```diff
@@            Coverage Diff             @@
##             main   #55461      +/-   ##
==========================================
- Coverage   88.41%   88.41%   -0.01%     
==========================================
  Files         652      654       +2     
  Lines      186918   187855     +937     
  Branches    36077    36145      +68     
==========================================
+ Hits       165271   166095     +824     
- Misses      14901    15000      +99     
- Partials     6746     6760      +14     
```

| [Files with missing lines](https://app.codecov.io/gh/nodejs/node/pull/55461?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) | Coverage Δ | |
|---|---|---|
| [lib/internal/fs/promises.js](https://app.codecov.io/gh/nodejs/node/pull/55461?src=pr&el=tree&filepath=lib%2Finternal%2Ffs%2Fpromises.js&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs#diff-bGliL2ludGVybmFsL2ZzL3Byb21pc2VzLmpz) | `98.23% <100.00%> (-0.01%)` | :arrow_down: |

... and [179 files with indirect coverage changes](https://app.codecov.io/gh/nodejs/node/pull/55461/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs)

</details>"
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2461168508,avivkeller,2024-11-07T02:06:31Z,"Assuming this lands in 23.X.0, we can remove the warning in 23.(X + 1).0

Although, because this is experimental, a warning isn't technically **required**, so you have the final say (IMO) whether there is one to add"
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2475114671,isker,2024-11-14T00:42:10Z,@RedYetiDev can you take another look?
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2554662322,isker,2024-12-19T15:35:26Z,@nodejs/fs please take a look. Thanks!
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2563796711,isker,2024-12-27T15:21:33Z,Maybe someone from @nodejs/streams could review?
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2564426811,isker,2024-12-28T20:12:33Z,"Thanks @jasnell.  @avivkeller stated on slack that they don't think they're qualified to approve but I don't know how to withdraw the review request here.  Besides that, I think there is nothing else here blocking a merge."
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2564431688,isker,2024-12-28T20:32:59Z,Thanks!
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2564810103,nodejs-github-bot,2024-12-29T18:43:54Z,CI: https://ci.nodejs.org/job/node-test-pull-request/64256/
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2585858312,isker,2025-01-12T18:20:38Z,"Hi @jasnell, is there anything else I need to do to land this PR?"
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2609153641,nodejs-github-bot,2025-01-23T08:30:40Z,CI: https://ci.nodejs.org/job/node-test-pull-request/64633/
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2610948866,nodejs-github-bot,2025-01-23T20:26:38Z,CI: https://ci.nodejs.org/job/node-test-pull-request/64669/ 💛 
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2646661922,isker,2025-02-09T23:53:33Z,"Hi @mcollina or @jasnell, could you take another look at landing this?  I'm not sure whether the orange stuff in Jenkins means CI failed or not."
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2646849146,nodejs-github-bot,2025-02-10T03:40:33Z,Landed in 1781f6363359f3d0d944360c13f9e6206938418d
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2646867900,isker,2025-02-10T04:02:29Z,Thanks @jasnell!
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2653329521,karlhorky,2025-02-12T10:39:38Z,"@isker @jasnell @mcollina @avivkeller Thanks for the PR, reviews and merge!

Excited to see this released - seems it's planned in Node.js 23.8.0:

- https://github.com/nodejs/node/pull/57005

Will this also be backported to v22?"
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2654095823,isker,2025-02-12T15:40:23Z,I don't have any plans to attempt a backport myself.
55461,closed,fs: make `FileHandle.readableWebStream` always create byte streams,2659826820,karlhorky,2025-02-14T16:55:14Z,"Now that this PR [has been released in Node.js v23.8.0](https://github.com/nodejs/node/pull/57005):

I can confirm that Node.js v23.8.0 `FileHandle.readableWebStream()` can be used without configuration to easily create Web Streams 🎉

```ts
import fs from ""node:fs/promises"";
import http from ""node:http"";
import path from ""node:path"";
import { Readable } from ""node:stream"";

const filePath = ""./image.jpg"";

const server = http.createServer(async (nodeRequest, nodeResponse) => {
  const stats = await fs.stat(filePath);
  const fileHandle = await fs.open(filePath);
  const webStream = fileHandle.readableWebStream();

  nodeResponse.writeHead(200, {
    ""Content-Type"": ""image/jpeg"",
    ""Content-Length"": String(stats.size),
  });

  const nodeStream = Readable.fromWeb(webStream);

  nodeStream.pipe(nodeResponse).on(""finish"", async () => {
    await fileHandle.close();
  });
});

const port = 3000;
server.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});
```

CodeSandbox demo: https://codesandbox.io/p/devbox/filehandle-readablewebstream-with-new-response-forked-rly47y?file=%2Findex.js%3A9%2C35&workspaceId=ws_GfAuHrswXyA1DoeSwsjjjz

![Screenshot 2025-02-14 at 17 47 35](https://github.com/user-attachments/assets/39e3d89c-16a3-4cb2-90d9-6d7dd772dea7)
"
53682,closed,worker: add postMessageToThread,2207040416,nodejs-github-bot,2024-07-03T19:30:37Z,CI: https://ci.nodejs.org/job/node-test-pull-request/60026/
53682,closed,worker: add postMessageToThread,2212373371,nodejs-github-bot,2024-07-07T08:45:51Z,CI: https://ci.nodejs.org/job/node-test-pull-request/60135/
53682,closed,worker: add postMessageToThread,2213252356,ShogunPanda,2024-07-08T07:37:08Z,"> Not sure if new errors should be also marked as experimental like the API using it.

You are right: I marked them as well.

> And I'm also not sure if `workerMessage` should be documented in process events as it is a reserved event now.
 
I documented so that users know they might have to listen to it.

> If we see a too high risk of clashes by reserving this event name we could move to a symbol.

👍 "
53682,closed,worker: add postMessageToThread,2213258384,nodejs-github-bot,2024-07-08T07:40:39Z,CI: https://ci.nodejs.org/job/node-test-pull-request/60155/
53682,closed,worker: add postMessageToThread,2213762361,nodejs-github-bot,2024-07-08T11:29:27Z,CI: https://ci.nodejs.org/job/node-test-pull-request/60158/
53682,closed,worker: add postMessageToThread,2213786573,nodejs-github-bot,2024-07-08T11:42:41Z,CI: https://ci.nodejs.org/job/node-test-pull-request/60159/
53682,closed,worker: add postMessageToThread,2214224554,nodejs-github-bot,2024-07-08T14:24:45Z,CI: https://ci.nodejs.org/job/node-test-pull-request/60164/
53682,closed,worker: add postMessageToThread,2214819383,nodejs-github-bot,2024-07-08T17:48:32Z,CI: https://ci.nodejs.org/job/node-test-pull-request/60168/
53682,closed,worker: add postMessageToThread,2215016862,nodejs-github-bot,2024-07-08T19:33:46Z,CI: https://ci.nodejs.org/job/node-test-pull-request/60182/
53682,closed,worker: add postMessageToThread,2216707015,nodejs-github-bot,2024-07-09T06:41:06Z,"<details><summary>Commit Queue failed</summary><pre>- Loading data for nodejs/node/pull/53682
✔  Done loading data for nodejs/node/pull/53682
----------------------------------- PR info ------------------------------------
Title      worker: add postMessageToThread (#53682)
Author     Paolo Insogna &lt;paolo@cowtech.it&gt; (@ShogunPanda)
Branch     ShogunPanda:send-to-worker -&gt; nodejs:main
Labels     semver-minor, process, lib / src, author ready, worker, needs-ci
Commits    1
 - worker: add postMessageToThread
Committers 1
 - Paolo Insogna &lt;paolo@cowtech.it&gt;
PR-URL: https://github.com/nodejs/node/pull/53682
Reviewed-By: Matteo Collina &lt;matteo.collina@gmail.com&gt;
Reviewed-By: James M Snell &lt;jasnell@gmail.com&gt;
Reviewed-By: Benjamin Gruenbaum &lt;benjamingr@gmail.com&gt;
Reviewed-By: Gerhard Stöbich &lt;deb2001-github@yahoo.de&gt;
------------------------------ Generated metadata ------------------------------
PR-URL: https://github.com/nodejs/node/pull/53682
Reviewed-By: Matteo Collina &lt;matteo.collina@gmail.com&gt;
Reviewed-By: James M Snell &lt;jasnell@gmail.com&gt;
Reviewed-By: Benjamin Gruenbaum &lt;benjamingr@gmail.com&gt;
Reviewed-By: Gerhard Stöbich &lt;deb2001-github@yahoo.de&gt;
--------------------------------------------------------------------------------
   ⚠  Commits were pushed since the last approving review:
   ⚠  - worker: add postMessageToThread
   ℹ  This PR was created on Tue, 02 Jul 2024 08:38:46 GMT
   ✔  Approvals: 4
   ✔  - Matteo Collina (@mcollina) (TSC): https://github.com/nodejs/node/pull/53682#pullrequestreview-2153146746
   ✔  - James M Snell (@jasnell) (TSC): https://github.com/nodejs/node/pull/53682#pullrequestreview-2157902186
   ✔  - Benjamin Gruenbaum (@benjamingr) (TSC): https://github.com/nodejs/node/pull/53682#pullrequestreview-2161833054
   ✔  - Gerhard Stöbich (@Flarna): https://github.com/nodejs/node/pull/53682#pullrequestreview-2162710662
   ✔  Last GitHub CI successful
   ℹ  Last Full PR CI on 2024-07-08T19:33:46Z: https://ci.nodejs.org/job/node-test-pull-request/60182/
- Querying data for job/node-test-pull-request/60182/
   ✔  Last Jenkins CI successful
--------------------------------------------------------------------------------
   ✔  Aborted `git node land` session in /home/runner/work/node/node/.ncu</pre><a href='https://github.com/nodejs/node/actions/runs/9852162608'>https://github.com/nodejs/node/actions/runs/9852162608</a></details>"
53682,closed,worker: add postMessageToThread,2216787156,nodejs-github-bot,2024-07-09T07:16:06Z,Landed in 66a635cece74eda6772b062ed4df9f683e66accd
53682,closed,worker: add postMessageToThread,2659237473,ShogunPanda,2025-02-14T12:39:56Z,@targos May I ask you why this can't land on v20?
53682,closed,worker: add postMessageToThread,2659359357,targos,2025-02-14T13:37:21Z,I don't remember.
53682,closed,worker: add postMessageToThread,2659544589,marco-ippolito,2025-02-14T14:57:27Z,@ShogunPanda you can try landing a manual backport since we are doing a special minor v20.x release
53682,closed,worker: add postMessageToThread,2659717851,ShogunPanda,2025-02-14T16:05:02Z,Would love to. How do I do that?
53682,closed,worker: add postMessageToThread,2659776832,marco-ippolito,2025-02-14T16:30:46Z,"> Would love to. How do I do that?

Cherry-pick the landed commit on a branch detached from v20.x-staging, and open a pr"
56954,closed,doc: improve documentation on argument validation,2654669783,nodejs-github-bot,2025-02-12T19:34:54Z,"<details><summary>Commit Queue failed</summary><pre>- Loading data for nodejs/node/pull/56954
✔  Done loading data for nodejs/node/pull/56954
----------------------------------- PR info ------------------------------------
Title      doc: improve documentation on argument validation (#56954)
   ⚠  Could not retrieve the email or name of the PR author's from user's GitHub profile!
Branch     Aditi-1400:doc-update -&gt; nodejs:main
Labels     c++, author ready, needs-ci
Commits    1
 - doc: improve documentation on argument validation
Committers 1
 - Aditi &lt;aditisingh1400@gmail.com&gt;
PR-URL: https://github.com/nodejs/node/pull/56954
Reviewed-By: Joyee Cheung &lt;joyeec9h3@gmail.com&gt;
Reviewed-By: Ulises Gascón &lt;ulisesgascongonzalez@gmail.com&gt;
------------------------------ Generated metadata ------------------------------
PR-URL: https://github.com/nodejs/node/pull/56954
Reviewed-By: Joyee Cheung &lt;joyeec9h3@gmail.com&gt;
Reviewed-By: Ulises Gascón &lt;ulisesgascongonzalez@gmail.com&gt;
--------------------------------------------------------------------------------
   ℹ  This PR was created on Fri, 07 Feb 2025 21:11:29 GMT
   ✔  Approvals: 2
   ✔  - Joyee Cheung (@joyeecheung) (TSC): https://github.com/nodejs/node/pull/56954#pullrequestreview-2610220323
   ✔  - Ulises Gascón (@UlisesGascon): https://github.com/nodejs/node/pull/56954#pullrequestreview-2611384161
   ✔  Last GitHub CI successful
   ✘  No Jenkins CI runs detected
--------------------------------------------------------------------------------
   ✔  Aborted `git node land` session in /home/runner/work/node/node/.ncu</pre><a href='https://github.com/nodejs/node/actions/runs/13293370008'>https://github.com/nodejs/node/actions/runs/13293370008</a></details>"
56954,closed,doc: improve documentation on argument validation,2654693835,joyeecheung,2025-02-12T19:46:57Z,"Oh boy, somehow the CI checker in ncu wants Jenkins to be run for src/README.md changes "
56954,closed,doc: improve documentation on argument validation,2654699804,nodejs-github-bot,2025-02-12T19:49:31Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65156/
56954,closed,doc: improve documentation on argument validation,2656986750,nodejs-github-bot,2025-02-13T15:37:21Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65182/
56954,closed,doc: improve documentation on argument validation,2659009177,nodejs-github-bot,2025-02-14T11:08:37Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65202/
56954,closed,doc: improve documentation on argument validation,2659624046,nodejs-github-bot,2025-02-14T15:27:35Z,Landed in f208027c3b040132589107233a95c1799ecdb9ef
57015,closed,doc: buffer: fix typo on `Buffer.copyBytesFrom(` `offset` option,2659538003,nodejs-github-bot,2025-02-14T14:54:31Z,Landed in e4f2c25527a953ba524058cbb15fd1db60a820e1
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2627420643,nodejs-github-bot,2025-01-31T13:58:40Z,"Review requested:

- [ ] @nodejs/security-wg"
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2627515723,richardlau,2025-01-31T14:42:10Z,FWIW the failing GHA workflow is https://github.com/nodejs/node/pull/56063#issuecomment-2627481292.
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2627690670,joyeecheung,2025-01-31T16:01:40Z,"By the way I wonder what we think about migrating away from `tools/mk-ca-bundle.pl`, I am thinking about updating it to output the certificate data in octal literals in https://github.com/nodejs/node/pull/56832 to skip the unnecessary serdes cost, but then if we are changing it substantially, we might as well just rewrite it in JavaScript instead of invoking a Perl script from JavaScript (and the Perl script already has some modifications from our side, like omitting TrustCor CAs)"
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2627759891,richardlau,2025-01-31T16:32:32Z,"> By the way I wonder what we think about migrating away from `tools/mk-ca-bundle.pl`, I am thinking about updating it to output the certificate data in octal literals in #56832 to skip the unnecessary serdes cost, but then if we are changing it substantially, we might as well just rewrite it in JavaScript instead of invoking a Perl script from JavaScript (and the Perl script already has some modifications from our side, like omitting TrustCor CAs)

I think if we're not planning to resync to upstream curl's version of the tool at any point in the future (I think it was tried once and abandoned) then rewriting in something other than Perl would be a plus. "
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2643684410,richardlau,2025-02-07T18:23:35Z,"> > By the way I wonder what we think about migrating away from `tools/mk-ca-bundle.pl`, I am thinking about updating it to output the certificate data in octal literals in #56832 to skip the unnecessary serdes cost, but then if we are changing it substantially, we might as well just rewrite it in JavaScript instead of invoking a Perl script from JavaScript (and the Perl script already has some modifications from our side, like omitting TrustCor CAs)
> 
> I think if we're not planning to resync to upstream curl's version of the tool at any point in the future (I think it was tried once and abandoned) then rewriting in something other than Perl would be a plus.

Maybe this discussion should be an issue to itself. FWIW https://blog.mozilla.org/security/2021/05/10/beware-of-applications-misusing-root-stores/ recommends https://www.ccadb.org/resources rather than parsing `certdata.txt`."
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2644045804,joyeecheung,2025-02-07T20:18:40Z,There is an old issue about the storing as DER idea https://github.com/nodejs/node/issues/45768 - I added a comment to reference the conversations here.
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2644076994,bnoordhuis,2025-02-07T20:36:57Z,The actual download is https://ccadb.my.salesforce-sites.com/mozilla/IncludedRootsPEMTxt?TrustBitsInclude=Websites which is a domain name that doesn't exactly instill a warm fuzzy sense of security.
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2654976750,nodejs-github-bot,2025-02-12T22:26:20Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65165/
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2656263279,nodejs-github-bot,2025-02-13T11:08:50Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65177/
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2656996771,joyeecheung,2025-02-13T15:40:40Z,"The Linux GH action is failing in a c++ compliation error, which I think requires a rebase? Not sure if the checkout action does it.."
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2657011597,nodejs-github-bot,2025-02-13T15:45:43Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65185/
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2658979157,nodejs-github-bot,2025-02-14T10:55:11Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65200/
56843,closed,tools: fix release URL computation in update-root-certs.mjs,2659446398,nodejs-github-bot,2025-02-14T14:15:16Z,Landed in 1e6a6569dc5235d8f1cfe8b6f7dda59dc1717365
57012,closed,crypto: fix missing `OPENSSL_NO_ENGINE` guard,2653549219,nodejs-github-bot,2025-02-12T12:17:28Z,"Review requested:

- [ ] @nodejs/crypto"
57012,closed,crypto: fix missing `OPENSSL_NO_ENGINE` guard,2653644416,nodejs-github-bot,2025-02-12T12:59:22Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65148/
57012,closed,crypto: fix missing `OPENSSL_NO_ENGINE` guard,2653719785,codecov[bot],2025-02-12T13:29:47Z,"## [Codecov](https://app.codecov.io/gh/nodejs/node/pull/57012?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) Report
All modified and coverable lines are covered by tests :white_check_mark:
> Project coverage is 89.11%. Comparing base [(`b7ca23f`)](https://app.codecov.io/gh/nodejs/node/commit/b7ca23f50ee732377e4631014e933b0b8ef69a27?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) to head [(`c417004`)](https://app.codecov.io/gh/nodejs/node/commit/c417004bdf8ecd163dd29f89b7a1da021ba762ab?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs).
> Report is 11 commits behind head on main.

<details><summary>Additional details and impacted files</summary>


```diff
@@            Coverage Diff             @@
##             main   #57012      +/-   ##
==========================================
- Coverage   89.12%   89.11%   -0.01%     
==========================================
  Files         665      665              
  Lines      193191   193191              
  Branches    37213    37214       +1     
==========================================
- Hits       172175   172160      -15     
- Misses      13757    13764       +7     
- Partials     7259     7267       +8     
```

| [Files with missing lines](https://app.codecov.io/gh/nodejs/node/pull/57012?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs) | Coverage Δ | |
|---|---|---|
| [src/crypto/crypto\_context.cc](https://app.codecov.io/gh/nodejs/node/pull/57012?src=pr&el=tree&filepath=src%2Fcrypto%2Fcrypto_context.cc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs#diff-c3JjL2NyeXB0by9jcnlwdG9fY29udGV4dC5jYw==) | `67.49% <ø> (ø)` | |
| [src/crypto/crypto\_util.cc](https://app.codecov.io/gh/nodejs/node/pull/57012?src=pr&el=tree&filepath=src%2Fcrypto%2Fcrypto_util.cc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs#diff-c3JjL2NyeXB0by9jcnlwdG9fdXRpbC5jYw==) | `71.07% <ø> (ø)` | |

... and [29 files with indirect coverage changes](https://app.codecov.io/gh/nodejs/node/pull/57012/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=nodejs)

</details>"
57012,closed,crypto: fix missing `OPENSSL_NO_ENGINE` guard,2654140561,nodejs-github-bot,2025-02-12T15:56:06Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65152/
57012,closed,crypto: fix missing `OPENSSL_NO_ENGINE` guard,2654807865,nodejs-github-bot,2025-02-12T20:47:14Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65160/
57012,closed,crypto: fix missing `OPENSSL_NO_ENGINE` guard,2657367452,nodejs-github-bot,2025-02-13T18:05:39Z,CI: https://ci.nodejs.org/job/node-test-pull-request/65188/ 💚 
57012,closed,crypto: fix missing `OPENSSL_NO_ENGINE` guard,2659208553,nodejs-github-bot,2025-02-14T12:26:18Z,Landed in fc7682ca4bf9045864b23e4f43758d97ab36ad4d
55762,closed,"Custom DNS lookup failing on Node 20+, works on Node 18",2461826626,aduh95,2024-11-07T10:10:16Z,Did you report this to axios? Can you reproduce without external deps?
55762,closed,"Custom DNS lookup failing on Node 20+, works on Node 18",2462115992,geocine,2024-11-07T12:29:19Z,"> Did you report this to axios? Can you reproduce without external deps?

Yes I can repro I updated the code and removed axios"
55762,closed,"Custom DNS lookup failing on Node 20+, works on Node 18",2462307474,AlphaAzure-Bdeo,2024-11-07T13:58:06Z,"Had a similar issue. Apparently Node 20 expects a different output out of the function from Node18. Here is the current one that I have for Node 20 that works:
```
dns.lookup = function (domain: string, options: any, callback: any) {
            // Handle all possible function signatures
            if (typeof options === 'function') {
                callback = options;
                options = {};
            } else if (typeof options === 'number') {
                options = { family: options };
            } else if (!options) {
                options = {};
            }

            // Check if we have any custom DNS entries
            const customEntry = domains.find(entry => {
                // Check if the domain matches exactly
                return domain === entry.source;
            });

            if (customEntry) {
                if (options.all) {
                    // Return array format when options.all is true
                    callback(null, [{
                        address: customEntry.ip,
                        family: customEntry.family || 4
                    }]);
                } else {
                    // Return single address format
                    callback(null, customEntry.ip, customEntry.family || 4);
                }
                return;
            }

            // Fall back to original DNS lookup if no custom entry found
            return dnsLookup.call(this, domain, options, callback);
        };
```"
55762,closed,"Custom DNS lookup failing on Node 20+, works on Node 18",2487589297,huseyinacacak-janea,2024-11-20T06:16:14Z,"I’ve reviewed your issue and noticed that the default value of `autoSelectFamily` for connections has changed starting from [Node.js v20](https://nodejs.org/docs/latest-v20.x/api/net.html#socketconnectoptions-connectlistener). In v20, the default value is now `true`.

If you want to run your code in Node.js v20 and maintain the previous behavior, you can use the `--no-network-family-autoselection` flag when starting Node.js. This will disable the automatic selection of the network family and might help address the issue you’re encountering."
55762,closed,"Custom DNS lookup failing on Node 20+, works on Node 18",2597780391,dario-colombo,2025-01-17T09:18:36Z," node <= 18 
 callback(err, address, family);
node >18
 callback(err, [{address, family}]);"
55762,closed,"Custom DNS lookup failing on Node 20+, works on Node 18",2659132587,StefanStojanovic,2025-02-14T11:50:02Z,Closing this since based on the last few comments it seems to be explained. Feel free to reopen if needed.
51968,closed,High cpu usage and traffic when using windows named pipes,2482487491,huseyinacacak-janea,2024-11-18T10:00:14Z,"I’ve taken a closer look at this issue and would like to share my observations. From my investigation, it appears that  `Net.Socket` uses a non-overlapped pipe and relies on the [PeekNamedPipe](https://github.com/nodejs/node/blob/746b17e1a5a9d09294b4c993a0319be6e5c39837/deps/uv/src/win/pipe.c#L1981) API to check the pipe for readable data. Unfortunately, this API call seems to be the cause of the high CPU usage observed.

Additionally, I noticed in the documentation for the `Net` module, under the section titled [IPC support](https://nodejs.org/api/net.html#ipc-support), the following is mentioned:

> The path must refer to an entry in \\?\pipe\ or \\.\pipe\

This indicates that using an IP address is not supported by this module, which might limit certain use cases.

As an alternative, you might consider using [createReadStream](https://nodejs.org/api/fs.html#fscreatereadstreampath-options). Here’s an example of how this can be implemented:

```js
var pipe = fs.createReadStream(null, {
   fd
});
```

This alternative worked as expected on my local computer."
51968,closed,High cpu usage and traffic when using windows named pipes,2659126209,StefanStojanovic,2025-02-14T11:46:33Z,Closing this since the last comment explains the reasons behind the behavior. Please reopen if needed.
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1558145592,aduh95,2023-05-22T22:52:59Z,@nodejs/i18n 
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1558154849,srl295,2023-05-22T23:03:14Z,"@abster  Hi! Good to see you here.  Yeah, can pick up the ICU dot release when it's available…"
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1572125342,Antonius-S,2023-06-01T14:06:50Z,@abster meanwhile won't this help? https://nodejs.org/docs/latest-v19.x/api/intl.html#providing-icu-data-at-runtime
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1595139349,abster,2023-06-16T18:49:09Z,"@Antonius-S From my understanding CLDR data can be updated on a specific ICU major release but updating CLDR data on a previous ICU release may not always be compatible, since CLDR releases are tied to specific ICU major releases."
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1595142206,abster,2023-06-16T18:51:59Z,"Just as a heads-up, ICU 73.2 has been released: https://github.com/unicode-org/icu/releases/tag/release-73-2. Updating node.js to use ICU4C-73.2 should include the fix for en-ZA (addressed in CLDR [issue](https://unicode-org.atlassian.net/browse/CLDR-16247))."
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1595183124,richardlau,2023-06-16T19:23:15Z,"To set expectations, our automation should pick up the new ICU release over the weekend. There's no reason to rush this any earlier as we won't be able to run the CI on it until the security releases are done next week."
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1598367602,Antonius-S,2023-06-20T08:45:43Z,"@abster 
> @Antonius-S From my understanding CLDR data can be updated on a specific ICU major release but updating CLDR data on a previous ICU release may not always be compatible, since CLDR releases are tied to specific ICU major releases.

According to docs, for external ICU to work, the binary should be built with at most small-icu option so this is just a temporary workaround to solve the issue until new build is ready"
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1625710359,abster,2023-07-07T17:16:47Z,"@richardlau - I see that icu version is updated to 73.2 in the main branch: https://github.com/nodejs/node/blob/main/tools/icu/current_ver.dep

The latest minor release (v18.6.1) for node 18 is however still on 72.1. Do you know when node 18 would be updated to ICU 73.2?

https://github.com/nodejs/node/blob/v18.16.1/tools/icu/current_ver.dep

"
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1625869880,richardlau,2023-07-07T18:43:40Z,We usually want changes in a current release for at least two weeks before landing in LTS -- I see https://github.com/nodejs/node/pull/48502 only just recently went out in Node.js 20.4.0 so it might be a bit soon for the being prepared 18.17.0 (https://github.com/nodejs/node/pull/48694).
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1652285252,abster,2023-07-26T18:17:32Z,@richardlau - The latest minor release ([v18.17.0](https://github.com/nodejs/node/blob/v18.17.0/tools/icu/current_ver.dep)) for node 18 is on ICU 73.1.  Do you know when you expect node 18 to be updated to ICU 73.2? 
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1652291225,richardlau,2023-07-26T18:22:38Z,Sometime in August according to the current plan in https://github.com/nodejs/Release/issues/737. May be a little clearer after tomorrow's working group meeting where we usually look at the schedules and see who's available to do releases https://github.com/nodejs/Release/issues/886.
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1652314388,srl295,2023-07-26T18:41:55Z,"@abster wrote:
> @Antonius-S From my understanding CLDR data can be updated on a specific ICU major release but updating CLDR data on a previous ICU release may not always be compatible, since CLDR releases are tied to specific ICU major releases.

Hi…

Correct, prior ICUs **cannot** be upgraded to arbitrary CLDR versions. If there's enough interest/available hands to help, a CLDR fix could be back-ported to a prior CLDR maint line, which could then be picked up by the corresponding ICU maint line. 
"
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1703169505,abster,2023-09-01T18:29:33Z,"([v18.17.1](https://github.com/nodejs/node/blob/v18.17.1/tools/icu/current_ver.dep)) is on ICU 73.1. Is there a planned release for node 18, which will include update to ICU 73.2? Also, is there a target release date?"
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1703235867,richardlau,2023-09-01T19:33:48Z,FYI @ruyadorno perhaps we can consider the ICU update (https://github.com/nodejs/node/pull/48502) for https://github.com/nodejs/node/pull/49220.
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1766061661,alexmojaki,2023-10-17T09:46:48Z,"Looks like there was a change recently, and I see the two PRs above are merged. Is this done?"
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,1766361452,aduh95,2023-10-17T12:54:02Z,"The ICU update has landed in all supported release lines, I’m going to assume this is fixed. Please comment or reopen if the issue still remains. "
48120,closed,Decimal and grouping separator for en-ZA does not align with in-country usage,2659060401,icyJoseph,2025-02-14T11:26:56Z,"Hi,

Using Node 22.12.0, and I still see this issue:

```node
console.log(new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'SAR' }).format(1234.56));
// SAR 1 234,56
```

<img width=""849"" alt=""Image"" src=""https://github.com/user-attachments/assets/8c7b6b5d-146f-4b04-9228-88206313d5b9"" />

Whereas, running the same on, say Chrome, returns, `SAR 1,234.56`. Other browsers, as well as `Deno`, return the same.

How can I debug/fix this?"
56887,closed,--env-file-if-exists throws error when  the .env file doesn't exist and when combined with --watch,2629980223,juanarbol,2025-02-03T05:10:16Z,Interesting...
56887,closed,--env-file-if-exists throws error when  the .env file doesn't exist and when combined with --watch,2630011732,juanarbol,2025-02-03T05:29:04Z,"This seems to be fixed in upstream.

```bash
./node --env-file-if-exists=.env --watch main.js
.env not found. Continuing without it.
.env not found. Continuing without it.
Hola mundo
Completed running 'main.js'
```

Thanks for this report, please make sure you use LTS releases. See https://github.com/nodejs/release?tab=readme-ov-file#release-schedule

This bug is fixed in v22.13.1.


```bash
$ node -v
v22.13.1

$ node --env-file-if-exists=.env --watch main
.env not found. Continuing without it.
.env not found. Continuing without it.
Hola mundo
Completed running 'main'
```

I'll proceed to close this issue as it is fixed and released"
56887,closed,--env-file-if-exists throws error when  the .env file doesn't exist and when combined with --watch,2630023445,mkvlrn,2025-02-03T05:40:09Z,Thanks for looking into it. I was using latest (23) because of the removal of the --experimental-strip-types flag and never even tried with LTS - that was a terrible oversight of mine. Too excited to run those ts files!
56887,closed,--env-file-if-exists throws error when  the .env file doesn't exist and when combined with --watch,2630027900,juanarbol,2025-02-03T05:44:17Z,Please be careful :)
56887,closed,--env-file-if-exists throws error when  the .env file doesn't exist and when combined with --watch,2658625701,aduh95,2025-02-14T08:44:08Z,"@juanarbol rather than pushing users off of Current releases (we want users to use Current releases, it's the whole point of having them), it would more useful to use the report to tag the relevant folks and make sure the bug doesn't make its way into an LTS release – which has happen, see https://github.com/nodejs/node/issues/57040"
57035,closed,"readline.question is not async ready, contrary to the documentation",2657717731,geeksilva97,2025-02-13T21:10:34Z,"Yeah, docs need to make that clear. It will return a promise only when importing from `node:readline/promises`"
57035,closed,"readline.question is not async ready, contrary to the documentation",2657719462,geeksilva97,2025-02-13T21:11:36Z,"> Yeah, docs need to make that clear. It will return a promise only when importing from `node:readline/promises`

Actually, it looks correct. The provided link is for Promises API.

If you do it like

```js
const readline = require('node:readline/promises');
const { stdin: input, stdout: output } = require('node:process');

const rl = readline.createInterface({ input, output });

(async function () {
  const answer = await rl.question('What is your favorite food? ');
  console.log(`Oh, so your favorite food is ${answer}`);
})();
```

It works"
57035,closed,"readline.question is not async ready, contrary to the documentation",2658432820,lemoustachiste,2025-02-14T07:02:49Z,"Great, thanks I missed the import subtlety!"
